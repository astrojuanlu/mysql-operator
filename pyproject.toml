# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.
[project]
name = "mysql-operator"
version = "0.0.1"
requires-python = ">=3.10,<4"
dependencies = [
    "ops>=2.8.0,<3",
    "tenacity>=8.2.2,<9",
    "boto3>=1.28.23,<2",
    "typing_extensions>=4.7.1,<5",
    "jinja2>=3.1.2,<4",
    "python_hosts>=1.0.6,<2",
    "pexpect>=4.9.0,<5",
    "pyyaml>=6.0.2,<7",
]

[tool.poetry]
package-mode = false
requires-poetry = ">=2.2.0"

[dependency-groups]
charm-libs = [
    # data_platform_libs/v0/data_interfaces.py
    "ops>=2.0.0",
    # data_platform_libs/v0/upgrade.py
    "poetry-core",
    # data_platform_libs/v0/upgrade.py requires pydantic ^1.10
    # data_platform_libs/v0/data_models.py requires pydantic ^1.10
    # grafana_agent/v0/cos_agent.py requires pydantic
    "pydantic~=1.10",
    # grafana_agent/v0/cos_agent.py
    "cosl>=0.0.50",
    # tls_certificates_interface/v2/tls_certificates.py
    "cryptography>=42.0.5",
    "jsonschema",
    # tempo_coordinator_k8s/v0/charm_tracing.py
    "opentelemetry-exporter-otlp-proto-http==1.21.0",
]
format = ["ruff>=0.12.7,<0.13"]
lint = [
    "ruff>=0.12.7,<0.13",
    "codespell>=2.2.5,<3",
    "shellcheck-py>=0.9.0.5,<0.10",
]
unit = [
    "pytest>=7.4.0,<8",
    "pytest-mock>=3.11.1,<4",
    "coverage[toml]>=7.2.7,<8",
    "parameterized>=0.9.0,<0.10",
]
integration = [
    "pytest>=7.4.0,<8",
    "pytest-operator>=0.35.0,<0.36",
    "juju>=3.6.0.0,<4",
    "mysql-connector-python>=9.1.0,<10",
    "tenacity>=8.2.2,<9",
    "boto3>=1.28.11,<2",
    "pyyaml~=6.0",
    "urllib3>=2.0.0,<3",
    "allure-pytest>=2.13.2,<3",
    "allure-pytest-default-results>=0.1.2,<0.2",
    "jubilant-backports>=1.4.0,<2",
]

[tool.uv]
package = false
default-groups = [
    "charm-libs",
    "format",
    "lint",
    "unit",
    "integration",
]

[tool.poetry.group.format]
optional = true

[tool.poetry.group.lint]
optional = true

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"
asyncio_mode = "auto"

# Formatting tools configuration
[tool.ruff]
# preview and explicit preview are enabled for CPY001
preview = true
target-version = "py310"
src = ["src", "."]
line-length = 99

[tool.ruff.lint]
explicit-preview-rules = true
select = ["A", "E", "W", "F", "C", "N", "D", "I", "B", "CPY001", "RUF", "S", "SIM", "UP", "TC"]
ignore = [
  "D107", # Ignore D107 Missing docstring in __init__
  "E501", # Ignore E501 Line too long
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D1", "D417",
    # Asserts
    "B011",
    # Disable security checks for tests
    "S",
]

[tool.ruff.lint.flake8-copyright]
# Check for properly formatted copyright header in each file
author = "Canonical Ltd."
notice-rgx = "Copyright\\s\\d{4}([-,]\\d{4})*\\s+"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"
